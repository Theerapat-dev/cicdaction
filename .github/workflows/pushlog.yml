name: commitlog

on:
  push:
    branches:
      - main

jobs:
  lint:
    name: Lint Code Base
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Run Super-Linter
        uses: github/super-linter@v4
        env:
          VALIDATE_ALL_CODEBASE: false
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build Project
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Build Project
        id: build
        run: |
          npm run build 2> build_errors.log
          exit_code=$?
          echo "error_files_present=$([[ $exit_code -ne 0 ]])" >> $GITHUB_ENV
          exit $exit_code

      - name: Create Gist for Error Files
        if: ${{ steps.build.outputs.error_files_present == 'true' }}
        id: create_gist
        run: |
            gist_response=$(curl -X POST \
                              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                              -H "Accept: application/vnd.github.v3+json" \
                              https://api.github.com/gists \
                              -d @- <<EOF
            {
              "description": "Build error log",
              "public": false,
              "files": {
                "build_errors.log": {
                  "content": "$(cat build_errors.log)"
                }
              }
            }
            EOF
            )
            gist_url=$(echo "$gist_response" | jq -r '.html_url')
            echo "gist_url=$gist_url" >> $GITHUB_ENV


      - name: Upload Error Files as Artifact
        if: ${{ steps.build.outputs.error_files_present == 'true' || always() }}
        uses: actions/upload-artifact@v3
        with:
          name: error-files
          path: build_errors.log

  push_to_registry:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: krisneonploy/dockerbuild

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Create New Branch with Commit Hash
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          git config user.name dornrock123
          git config user.email krisd3214@gmail.com
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          NEW_BRANCH_NAME="log-$(echo "$COMMIT_MESSAGE" | tr '[:upper:]' '[:lower:]' | tr '[:space:]' '-' | tr '[:punct:]' '-')"
          git checkout -b $NEW_BRANCH_NAME
          git push https://x-access-token:${GH_PAT}@github.com/${{ github.repository }}.git $NEW_BRANCH_NAME

  send_failure_notification:
        name: Send Failure Notification
        runs-on: ubuntu-latest
        needs: build
        if: ${{ failure() }}
        steps:
              - name: Checkout Code
                uses: actions/checkout@v3
                with:
                  fetch-depth: 2

              - name: Download Error Files
                uses: actions/download-artifact@v3
                with:
                  name: error-files

              - name: Get Error Log and Commit Info
                id: error_info
                run: |
                    commit_author_email=$(git log -1 --pretty=format:'%ae')
                    changed_files=$(git diff --name-only HEAD~1 HEAD | tr '\n' '\n')

                    error_paths=$(grep -o '/.*error' build_errors.log | sed 's/:.*//' | sort -u | tr '\n' ' ' | sed 's/ $//')
                    echo "error_paths=$error_paths" >> $GITHUB_ENV

                    error_files_array=($(echo "$error_paths" | tr ' ' '\n'))
                    non_error_files=""
                    while read -r file; do
                        is_error=0
                        for error_file in "${error_files_array[@]}"; do
                            if [ "$file" == "$error_file" ]; then
                                is_error=1
                                break
                            fi
                        done
                        if [ $is_error -eq 0 ]; then
                            non_error_files+="$file "
                        fi
                    done <<< "$changed_files"
                    echo "non_error_files=$non_error_files" >> $GITHUB_ENV

                    echo "commit_author_email=$commit_author_email" >> $GITHUB_ENV
                    echo "changed_files=$changed_files" >> $GITHUB_ENV

                    gist_url="${{ env.gist_url }}"
                    echo "gist_url=$gist_url" >> $GITHUB_ENV

              - name: Send email on failure
                uses: dawidd6/action-send-mail@v3
                with:
                    server_address: smtp.gmail.com
                    server_port: 587
                    username: ${{ secrets.GMAIL_USERNAME }}
                    password: ${{ secrets.GMAIL_APP_PASSWORD }}
                    subject: งาน ${{ github.job }} ของ ${{ github.repository }} ล้มเหลว
                    body: |
                      ข้อความ: งาน `build` ของ ${{ github.repository }} ล้มเหลว

                      รายละเอียดข้อผิดพลาดสามารถดูได้ที่ Gist:
                      ${{ env.gist_url }}

                      พาทของไฟล์ที่มีข้อผิดพลาด (ไม่ซ้ำ):
                      ${{ env.error_paths }}

                      ไฟล์และพาทที่ไม่มีข้อผิดพลาด: ${{ env.non_error_files }}

                      ไฟล์ที่มีการแก้ไข:
                      ${{ env.changed_files }}
                    to: ${{ env.commit_author_email }}
                    from: ${{ secrets.GMAIL_USERNAME }}

  send_success_notification:
            name: Send Success Notification
            runs-on: ubuntu-latest
            needs: [lint, build, push_to_registry]
            if: ${{ always() }}
            steps:
              - name: Checkout Code
                uses: actions/checkout@v3
                with:
                  fetch-depth: 2

              - name: Get Commit Info
                id: commit_info
                run: |
                  commit_author_email=$(git log -1 --pretty=format:'%ae')
                  changed_files=$(git diff --name-only HEAD~1 HEAD | tr '\n' ' ')
                  echo "commit_author_email=$commit_author_email" >> $GITHUB_ENV
                  echo "changed_files=$changed_files" >> $GITHUB_ENV

              - name: Send email on success
                if: ${{ needs.build.result == 'success' }}
                uses: dawidd6/action-send-mail@v3
                with:
                  server_address: smtp.gmail.com
                  server_port: 587
                  username: ${{ secrets.GMAIL_USERNAME }}
                  password: ${{ secrets.GMAIL_APP_PASSWORD }}
                  subject: งาน ${{ github.job }} ของ ${{ github.repository }} สำเร็จ
                  body: |
                    งาน `build` ของ ${{ github.repository }} สำเร็จ
                    commit successssssssssssss
                    ไฟล์ที่ถูก commit และ push คือ:
                    ${{ env.changed_files }}
                  to: ${{ env.commit_author_email }}
                  from: ${{ secrets.GMAIL_USERNAME }}

