name: commitlog

on:
  push:
    branches:
      - main

jobs:
  lint:
    name: Lint Code Base
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Run Super-Linter
        uses: github/super-linter@v4
        env:
          VALIDATE_ALL_CODEBASE: false
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Check Code Quality
    runs-on: ubuntu-latest
    needs: lint

    outputs:
      error_files_present: ${{ steps.check_error_file.outputs.error_files_present }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Build project and capture errors
        id: build_and_capture_errors
        run: |
          # Run npm build and capture error logs
          npm run build 2> build_errors.log
          exit_code=$?

          # Set output if errors are found
          if [ $exit_code -ne 0 ]; then
            echo "::set-output name=error_files_present::true"
          else
            echo "::set-output name=error_files_present::false"
          fi

          # Optionally, write error log to a file for later use
          echo "Build errors:" >> build_errors.log
          cat build_errors.log

      - name: Upload Error Files
        if: ${{ steps.build_and_capture_errors.outputs.error_files_present == 'true' }}
        uses: actions/upload-artifact@v3
        with:
          name: error-files
          path: build_errors.log

  push_to_registry:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: krisneonploy/dockerbuild

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Create New Branch with Commit Hash
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          git config user.name dornrock123
          git config user.email krisd3214@gmail.com
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          NEW_BRANCH_NAME="log-$(echo "$COMMIT_MESSAGE" | tr '[:upper:]' '[:lower:]' | tr '[:space:]' '-' | tr '[:punct:]' '-')"
          git checkout -b $NEW_BRANCH_NAME
          git push https://x-access-token:${GH_PAT}@github.com/${{ github.repository }}.git $NEW_BRANCH_NAME

  get_commit_author_email:
    name: Get Commit Author Email
    runs-on: ubuntu-latest
    outputs:
      commit_author_email: ${{ steps.get_commit_info.outputs.commit_author_email }}
      changed_files: ${{ steps.get_commit_info.outputs.changed_files }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Get Commit Info
        id: get_commit_info
        run: |
          AUTHOR_EMAIL=$(git log -1 --pretty=format:'%ae')
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | tr '\n' ' ')
          echo "::set-output name=commit_author_email::${AUTHOR_EMAIL}"
          echo "::set-output name=changed_files::${CHANGED_FILES}}"

  send_failure_notification:
    name: Send Failure Notification
    runs-on: ubuntu-latest
    needs: [lint, build, push_to_registry, get_commit_author_email]
    if: ${{ always() }}
    steps:
      - name: Send email on failure
        if: ${{ needs.build.result == 'failure' }}
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.GMAIL_USERNAME }}
          password: ${{ secrets.GMAIL_APP_PASSWORD }}
          subject: งาน ${{ github.job }} ของ ${{ github.repository }} ล้มเหลว
          body: |
            ข้อความ: งาน `build` ของ ${{ github.repository }} ล้มเหลว
            ไฟล์ที่มีข้อผิดพลาด:
            ${{ steps.read_error_files.outputs.error_files }}
            -------------------
            ไฟล์ที่มีการแก้ไข:
            ${{ needs.get_commit_author_email.outputs.changed_files }}
          to: ${{ needs.get_commit_author_email.outputs.commit_author_email }}
          from: ${{ secrets.GMAIL_USERNAME }}

  send_success_notification:
    name: Send Success Notification
    runs-on: ubuntu-latest
    needs: [lint, build, push_to_registry, get_commit_author_email]
    if: ${{ always() }}
    steps:
      - name: Send email on success
        if: ${{ needs.build.result == 'success' }}
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.GMAIL_USERNAME }}
          password: ${{ secrets.GMAIL_APP_PASSWORD }}
          subject: งาน ${{ github.job }} ของ ${{ github.repository }} สำเร็จ
          body: |
            งาน `build` ของ ${{ github.repository }} สำเร็จ

            ไฟล์ที่ถูก commit และ push คือ:
            ${{ needs.get_commit_author_email.outputs.changed_files }}
          to: ${{ needs.get_commit_author_email.outputs.commit_author_email }}
          from: ${{ secrets.GMAIL_USERNAME }}
